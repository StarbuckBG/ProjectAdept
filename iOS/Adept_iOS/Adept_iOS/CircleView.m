//
//  CircleView.m
//  Adept_iOS
//
//  Created by Martin Kuvandzhiev on 3/28/16.
//  Copyright (c) 2016 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "CircleView.h"


@implementation CircleView

#pragma mark Initialization

- (void)initialize
{
}

- (instancetype) initWithCoder:(NSCoder *)aDecoder
{
    self = [super initWithCoder:aDecoder];
    return self;
}

- (instancetype) initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    return self;
}
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect {
    // Drawing code
    [self drawCanvas2WithInsideTest:@"Hello world"];
}


#pragma mark Drawing Methods

- (void)drawCanvas2WithInsideTest: (NSString*)insideTest
{
    self.strokeWidth = MIN(self.frame.size.width, self.frame.size.height)/(25);
    
    NSInteger circleRadius = (MIN(self.frame.size.width, self.frame.size.height)*9)/(10 * 2);
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* gradientColor = [UIColor colorWithRed: 0.213 green: 0.756 blue: 0.923 alpha: 1];

    //// Image Declarations
    UIImage* insideImage = [UIImage imageNamed: @"insideImage.png"];

    //// DataCirle Drawing
    CGRect dataCirleRect = CGRectMake(self.frame.size.width/2 - circleRadius ,
                                      self.frame.size.height/2 - circleRadius ,
                                      circleRadius*2 ,
                                      circleRadius*2);
    
    UIBezierPath* dataCirlePath = [UIBezierPath bezierPathWithOvalInRect: dataCirleRect];
    CGContextSaveGState(context);
    [dataCirlePath addClip];
    CGContextScaleCTM(context, 1.0, -1.0);
    CGContextDrawTiledImage(context, CGRectMake(75, -45, insideImage.size.width, insideImage.size.height), insideImage.CGImage);
    CGContextRestoreGState(context);
    [gradientColor setStroke];
    dataCirlePath.lineWidth = self.strokeWidth;
    [dataCirlePath stroke];
    NSMutableParagraphStyle* dataCirleStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
    dataCirleStyle.alignment = NSTextAlignmentCenter;

    NSDictionary* dataCirleFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"Helvetica" size: 12], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: dataCirleStyle};

    CGFloat dataCirleTextHeight = [insideTest boundingRectWithSize: CGSizeMake(dataCirleRect.size.width, INFINITY)  options: NSStringDrawingUsesLineFragmentOrigin attributes: dataCirleFontAttributes context: nil].size.height;
    CGContextSaveGState(context);
    CGContextClipToRect(context, dataCirleRect);
    [insideTest drawInRect: CGRectMake(CGRectGetMinX(dataCirleRect), CGRectGetMinY(dataCirleRect) + (CGRectGetHeight(dataCirleRect) - dataCirleTextHeight) / 2, CGRectGetWidth(dataCirleRect), dataCirleTextHeight) withAttributes: dataCirleFontAttributes];
    CGContextRestoreGState(context);
}

@end
